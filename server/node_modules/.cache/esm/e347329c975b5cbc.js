let express,cors,formidable,jwt,requireSignIn,AWS,nanoid,readFileSync;_975‍.w("express",[["default",["express"],function(v){express=v}]]);_975‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_975‍.w("express-formidable",[["default",["formidable"],function(v){formidable=v}]]);_975‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_975‍.w("./middleware/index",[["requireSignIn",["requireSignIn"],function(v){requireSignIn=v}]]);_975‍.w("aws-sdk",[["default",["AWS"],function(v){AWS=v}]]);_975‍.w("nanoid",[["nanoid",["nanoid"],function(v){nanoid=v}]]);_975‍.w("fs",[["readFileSync",["readFileSync"],function(v){readFileSync=v}]]);






 
const morgan = require('morgan');
require('dotenv').config();
const Moralis = require("moralis/node"); // Node.js


const awsConfig = {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    region: process.env.AWS_REGION,
    apiVersion: process.env.AWS_API_VERSION,
}



const appId = "rX9zFb9Q12WkSV8xbVG0wVNmV8NqPhoG9gJ2I6k4";
const serverUrl = "https://bpblficeyq0o.usemoralis.com:2053/server";
const masterKey = "S5VqqDWRZ3kTYBJmiJpuYSKf5L60dI0PuO9irBLz";
const bodyParser = require("body-parser")
const cookieParser = require('cookie-parser')
const S3 = new AWS.S3(awsConfig)


const app = express();



// apply middleware (code run everytime before any response is sent back to the client)
app.use(cors({ credentials: true, origin: 'http://localhost:3000' }));



//app.use(express.json());
app.use(morgan("dev"));
//app.use(formidable());
Moralis.start({ serverUrl, appId, masterKey });
const jsonParser = bodyParser.json()


//route
// app.get("/", async (req,res)=>{
//   const objectId = req.objectId; 
//   const query = new Moralis.Query("User");
//   query.equalTo("objectId","zgmPN0Uf2F3leCZb6VnXAqjC");
//   const results = await query.find({useMasterKey:true});
//   console.log(results)
//   res.send(results)

// })

app.post("/authenticate", jsonParser, async (req, res) => {
    
    const objectId = req.body.user.objectId;
    _975‍.g.console.log(objectId)
    const token = jwt.sign({ objectId: objectId }, process.env.JWT_SECRET, {
        expiresIn: "7d"
    })
 
    const query = new Moralis.Query("User")
    query.equalTo("objectId", objectId);
    const results = await query.find({ useMasterKey: true });
    _975‍.g.console.log(results[0])
    if (results[0] != undefined) {
        res.cookie("token", token, {
            httpOnly: true,
    
        })
    }
 
    res.send('wow') //dont send cookie with auth token so user will not be able to access any endpoints 
})

app.post("/api/course/video-upload", formidable(), cookieParser(), async (req, res) => {

    try {

        jwt.verify(req.cookies.token, process.env.JWT_SECRET) // if not verified then catch block executed 
        const {video} = req.files;
        if(!video) return res.status(400).send('No Video');
        // console.log(video)

        //video params
        const params = {
            Bucket:"learn-platform-bucket",
            Key:`${nanoid()}.${video.type.split("/")[1]}`, //video/mp4
            Body: readFileSync(video.path),
            ACL: 'public-read',
            ContentType: video.type
        }

        //upload to S3
        S3.upload(params,(err,data)=>{
            if(err){
                _975‍.g.console.log(err);
                res.sendStatus(400);
            }
            _975‍.g.console.log(data);
            res.send(data)
        })
     
    }

    catch (err) {
        return res.redirect("")
    }

    res.send(" ")

})


//port

const port = process.env.PORT || 8000;

app.listen(port, () => console.log(`Server is running on port ${port}`))